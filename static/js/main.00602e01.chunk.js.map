{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useLocalStorageState","num","setNum","max","setMax","useState","rand","setRand","raffle","setRaffle","loading","setLoading","randomName","temp","Math","floor","random","length","console","log","useEffect","Number","Array","fill","map","_","i","filter","el","className","htmlFor","type","id","name","min","onChange","e","target","value","onClick","callback","factor","times","internalCallback","t","counter","setTimeout","setDeceleratingTimeout","disabled","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAuGeA,EApGH,WACT,MAAqBC,YAAqB,MAAM,IAAhD,mBAAMC,EAAN,KAAWC,EAAX,KACA,EAAqBF,YAAqB,MAAO,IAAjD,mBAAMG,EAAN,KAAWC,EAAX,KACA,EAAuBC,mBAAS,GAAhC,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAA2BF,mBAAS,MAApC,mBAAMG,EAAN,KAAcC,EAAd,KACA,EAA6BJ,oBAAS,GAAtC,mBAAMK,EAAN,KAAeC,EAAf,KAUMC,EAAa,WAElB,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWf,EAAIgB,QAC9CR,EAAUR,EAAIY,KAqDZ,OApCFK,QAAQC,IAAIlB,EAAK,OAEdmB,qBAAU,WAET,IAAIP,EAAOQ,OAAOlB,GAElBe,QAAQC,WAAWN,EAAM,QACzBX,EAAOoB,MAAMT,GAAMU,OAAOC,KAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAE,QAGxC,CAACvB,EAAKD,IAETkB,qBAAU,WACR,IAAIP,EAAOZ,EAAI0B,QAAO,SAAAC,GAAE,OAAIA,IAAOtB,KACpCJ,EAAOW,GACW,IAAfZ,EAAIgB,QACLb,EAAO,MAGP,CAACE,IAkBH,mCACE,qBAAKuB,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACA,sBAAKA,UAAU,cAAf,UACE,uBAAOC,QAAQ,WAAf,yCACA,uBAAOC,KAAK,SAASC,GAAG,WAAWC,KAAK,WAAWC,IAAI,IAAIC,SArE3C,SAACC,GACtB,IAAIvB,EAAOuB,EAAEC,OAAOC,MACrBlC,EAAOS,GACPK,QAAQC,IAAIhB,EAAK,SAkE0EmC,MAAOnC,OAE9F,sBAAK0B,UAAU,cAAf,UACE,0DACA,qBAAKA,UAAU,SAAf,SAAyBnB,EAAUF,EAASF,IAC5C,wBAAQiC,QA7DO,WAEzB5B,GAAW,GAGP,IAAIE,EAAOC,KAAKC,MAAMD,KAAKE,SAAWf,EAAIgB,SA+B5C,SAAgCuB,EAASC,EAAQC,GAC/C,IAAMC,GAAqBC,EAOxBF,EAP2BG,EAOpB,EAND,aACCD,EAAI,IACRE,WAAWH,IAAoBE,EAAUJ,GACzCD,OAJoB,IAACI,EAAGC,EAS9BC,WAAWH,EAAkBF,GAxC5BM,CAAuBnC,EAAY,GAAI,IAExCkC,YAAW,WACTnC,GAAW,GACXJ,EAAQN,EAAIY,MACX,MAkDmCmC,SAAUtC,EAASmB,UAAU,MAA7D,qBAEF,qBAAKA,UAAU,UAAf,SACE,oBAAIA,UAAU,eAAd,SAEA5B,EAAIuB,KAAI,SAACI,EAAIqB,GACX,OACA,6BAAiBrB,GAARqB,kBChFNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.00602e01.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport useLocalStorageState from \"use-local-storage-state\";\n\nconst App = () => {\n   const[num, setNum] = useLocalStorageState('num',[]);\n   const[max, setMax] = useLocalStorageState(\"max\", '');\n   const[rand, setRand] = useState(0);\n   const[raffle, setRaffle] = useState(null);\n   const[loading, setLoading] = useState(false);\n\n\n   const handleOnChange = (e) =>{\n     let temp = e.target.value;\n    setMax(temp);\n    console.log(max, \"max1\");\n   }\n   \n\n   const randomName = () => {\n    \n    let temp = Math.floor(Math.random() * num.length);\nsetRaffle(num[temp]);\n   }\n\n   const handleOnClick = () =>{\n\nsetLoading(true);\n\n     \n    let temp = Math.floor(Math.random() * num.length);\n     setDeceleratingTimeout(randomName, 10, 30);\n  \n    setTimeout(() => {\n      setLoading(false);\n      setRand(num[temp]);\n    }, 3000);\n\n   }\nconsole.log(num, \"num\");\n\n   useEffect(() => {\n     //max is sent as a string so we have to convert it\n    let temp = Number(max);\n\n    console.log(typeof temp, \"max2\");\n    setNum(Array(temp).fill().map((_, i) => i+1));\n   \n     \n   }, [max, setNum]);\n\n   useEffect(() => {\n     let temp = num.filter(el => el !== rand);\n    setNum(temp);\n    if(num.length === 1){\n      setMax('');\n    }\n\n   }, [rand]);\n\n  \n  function setDeceleratingTimeout(callback,factor, times) {\n    const internalCallback = ((t, counter) => {\n      return () => {\n        if (--t > 0) {\n          setTimeout(internalCallback, ++counter * factor);\n          callback();\n        }\n      };\n    })(times, 0);\n  \n    setTimeout(internalCallback, factor);\n  }\n  \n  \n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"section\">\n        <div className=\"section-one\">\n          <label htmlFor=\"quantity\">How many santas do we have?</label>\n          <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" onChange={handleOnChange} value={max}/>\n        </div>\n        <div className=\"section-two\">\n          <h2>You are SECRET SANTA of:</h2>\n          <div className=\"random\">{loading ? raffle : rand}</div>\n          <button onClick={handleOnClick} disabled={loading} className=\"btn\">Roll</button>\n        </div>\n        <div className=\"display\">\n          <ul className=\"display-list\">\n          {\n          num.map((el, index) =>{\n            return(\n            <li key={index}>{el}</li>\n          )})\n          }\n          </ul>\n        </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}